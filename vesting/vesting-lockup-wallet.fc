int equal_slices (slice a, slice b) asm "SDEQ";

slice get_address_from_config(int config_id) inline_ref {
    cell config_cell = config_param(config_id);
    if (cell_null?(config_cell)) {
        return null();
    }
    slice config_slice = config_cell.begin_parse();
    if (config_slice.slice_bits() < 256) {
        return null();
    }
    int addr = config_slice.preload_uint(256);
    return begin_cell()
            .store_uint(4, 3)
            .store_int(-1, 8)
            .store_uint(addr, 256)
            .end_cell()
            .begin_parse();
}

() recv_internal(slice in_msg) impure {
    ;; do nothing for internal messages
}

() recv_external(slice in_msg) impure {
    var signature = in_msg~load_bits(512);
    var cs = in_msg;
    var (subwallet_id, valid_until, msg_seqno) = (cs~load_uint(32), cs~load_uint(32), cs~load_uint(32));
    throw_if(35, valid_until <= now());
    var ds = get_data().begin_parse();
    var (stored_seqno, stored_subwallet, public_key, create_at, duration, period, total_amount, allow_elector) = (ds~load_uint(32), ds~load_uint(32), ds~load_uint(256), ds~load_uint(64), ds~load_uint(32), ds~load_uint(32), ds~load_coins(), ds~load_uint(1));
    ds.end_parse();
    throw_unless(33, msg_seqno == stored_seqno);
    throw_unless(34, subwallet_id == stored_subwallet);
    throw_unless(35, check_signature(slice_hash(in_msg), signature, public_key));

    cell msg = cs~load_ref();
    slice msg_cs = msg.begin_parse();
    int flags = msg_cs~load_uint(4); ;; skip
    slice sender_address = msg_cs~load_msg_addr(); ;; skip
    slice destination_address = msg_cs~load_msg_addr();

    accept_message();

    if (cs.slice_bits() != 8) {
        return ();
    }

    var mode = cs~load_uint(8);
    if (mode != 3) {
        return ();
    }

    int locked_amount = total_amount - total_amount * ((now() - create_at) / period) / (duration / period);

    if (allow_elector & (equal_slices(destination_address, get_address_from_config(0)) | equal_slices(destination_address, get_address_from_config(1)))) {
        locked_amount = 0;
    }

    if (locked_amount > 0) {
        raw_reserve(locked_amount, 2); ;; mode 2 - at most `amount` nanotons. Bit +2 in y means that the external action does not fail if the specified amount cannot be reserved; instead, all remaining balance is reserved
    }

    send_raw_message(cs~load_ref(), mode);

    set_data(begin_cell()
            .store_uint(stored_seqno + 1, 32)
            .store_uint(stored_subwallet, 32)
            .store_uint(public_key, 256)
            .store_uint(create_at, 64)
            .store_uint(duration, 32)
            .store_uint(period, 32)
            .store_coins(total_amount)
            .store_uint(allow_elector, 1)
            .end_cell());
}

;; Get methods

int seqno() method_id {
    return get_data().begin_parse().preload_uint(32);
}

int get_public_key() method_id {
    var cs = get_data().begin_parse();
    cs~load_uint(64);
    return cs.preload_uint(256);
}

int get_locked_amount(int now_time) method_id {
    var ds = get_data().begin_parse();
    var (stored_seqno, stored_subwallet, public_key, create_at, duration, period, total_amount, allow_elector) = (ds~load_uint(32), ds~load_uint(32), ds~load_uint(256), ds~load_uint(64), ds~load_uint(32), ds~load_uint(32), ds~load_coins(), ds~load_uint(1));
    return total_amount - total_amount * ((now_time - create_at) / period) / (duration / period);
}

(int, int, int, int, int) get_lockup_data() method_id {
    var ds = get_data().begin_parse();
    var (stored_seqno, stored_subwallet, public_key, create_at, duration, period, total_amount, allow_elector) = (ds~load_uint(32), ds~load_uint(32), ds~load_uint(256), ds~load_uint(64), ds~load_uint(32), ds~load_uint(32), ds~load_coins(), ds~load_uint(1));
    return (create_at, duration, period, total_amount, allow_elector);
}